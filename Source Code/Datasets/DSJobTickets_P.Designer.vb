'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.5420
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DSJobTickets_P"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DSJobTickets_P
    Inherits Global.System.Data.DataSet
    
    Private tabletblJobTickets As tblJobTicketsDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("tblJobTickets")) Is Nothing) Then
                MyBase.Tables.Add(New tblJobTicketsDataTable(ds.Tables("tblJobTickets")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblJobTickets() As tblJobTicketsDataTable
        Get
            Return Me.tabletblJobTickets
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DSJobTickets_P = CType(MyBase.Clone,DSJobTickets_P)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("tblJobTickets")) Is Nothing) Then
                MyBase.Tables.Add(New tblJobTicketsDataTable(ds.Tables("tblJobTickets")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tabletblJobTickets = CType(MyBase.Tables("tblJobTickets"),tblJobTicketsDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblJobTickets) Is Nothing) Then
                Me.tabletblJobTickets.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DSJobTickets_P"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSJobTickets_P.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tabletblJobTickets = New tblJobTicketsDataTable
        MyBase.Tables.Add(Me.tabletblJobTickets)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetblJobTickets() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DSJobTickets_P = New DSJobTickets_P
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub tblJobTicketsRowChangeEventHandler(ByVal sender As Object, ByVal e As tblJobTicketsRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblJobTicketsDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnProductName As Global.System.Data.DataColumn
        
        Private columnGeneratorName As Global.System.Data.DataColumn
        
        Private columnJobSite As Global.System.Data.DataColumn
        
        Private columnJobSiteAddress1 As Global.System.Data.DataColumn
        
        Private columnJobSiteAddress2 As Global.System.Data.DataColumn
        
        Private columnJobSiteCity As Global.System.Data.DataColumn
        
        Private columnJobSiteState As Global.System.Data.DataColumn
        
        Private columnJobSiteZip As Global.System.Data.DataColumn
        
        Private columnTransporterName As Global.System.Data.DataColumn
        
        Private columnDisposalFacilityName As Global.System.Data.DataColumn
        
        Private columnHWNumber As Global.System.Data.DataColumn
        
        Private columnIsManifest As Global.System.Data.DataColumn
        
        Private columnManifestNo As Global.System.Data.DataColumn
        
        Private columnAttn As Global.System.Data.DataColumn
        
        Private columnDriverName As Global.System.Data.DataColumn
        
        Private columnDriverRemarks As Global.System.Data.DataColumn
        
        Private columnJobPO As Global.System.Data.DataColumn
        
        Private columnJobTicketNo As Global.System.Data.DataColumn
        
        Private columnScheduleDate As Global.System.Data.DataColumn
        
        Private columnSpecialInstructions_T As Global.System.Data.DataColumn
        
        Private columnTicketNo As Global.System.Data.DataColumn
        
        Private columnTruckNo As Global.System.Data.DataColumn
        
        Private columnApprovalNoManifestText As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblJobTickets"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProductNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProductName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GeneratorNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGeneratorName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JobSiteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJobSite
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JobSiteAddress1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnJobSiteAddress1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JobSiteAddress2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnJobSiteAddress2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JobSiteCityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJobSiteCity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JobSiteStateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJobSiteState
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JobSiteZipColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJobSiteZip
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TransporterNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTransporterName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DisposalFacilityNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDisposalFacilityName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HWNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHWNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsManifestColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsManifest
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ManifestNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnManifestNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AttnColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAttn
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DriverNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDriverName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DriverRemarksColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDriverRemarks
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JobPOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJobPO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JobTicketNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJobTicketNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ScheduleDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnScheduleDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SpecialInstructions_TColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSpecialInstructions_T
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TicketNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTicketNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TruckNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTruckNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ApprovalNoManifestTextColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnApprovalNoManifestText
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblJobTicketsRow
            Get
                Return CType(Me.Rows(index),tblJobTicketsRow)
            End Get
        End Property
        
        Public Event tblJobTicketsRowChanging As tblJobTicketsRowChangeEventHandler
        
        Public Event tblJobTicketsRowChanged As tblJobTicketsRowChangeEventHandler
        
        Public Event tblJobTicketsRowDeleting As tblJobTicketsRowChangeEventHandler
        
        Public Event tblJobTicketsRowDeleted As tblJobTicketsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddtblJobTicketsRow(ByVal row As tblJobTicketsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddtblJobTicketsRow( _
                    ByVal ProductName As String,  _
                    ByVal GeneratorName As String,  _
                    ByVal JobSite As String,  _
                    ByVal JobSiteAddress1 As String,  _
                    ByVal JobSiteAddress2 As String,  _
                    ByVal JobSiteCity As String,  _
                    ByVal JobSiteState As String,  _
                    ByVal JobSiteZip As String,  _
                    ByVal TransporterName As String,  _
                    ByVal DisposalFacilityName As String,  _
                    ByVal HWNumber As String,  _
                    ByVal IsManifest As Boolean,  _
                    ByVal ManifestNo As String,  _
                    ByVal Attn As String,  _
                    ByVal DriverName As String,  _
                    ByVal DriverRemarks As String,  _
                    ByVal JobPO As String,  _
                    ByVal JobTicketNo As Integer,  _
                    ByVal ScheduleDate As Date,  _
                    ByVal SpecialInstructions_T As String,  _
                    ByVal TicketNo As Integer,  _
                    ByVal TruckNo As String,  _
                    ByVal ApprovalNoManifestText As String) As tblJobTicketsRow
            Dim rowtblJobTicketsRow As tblJobTicketsRow = CType(Me.NewRow,tblJobTicketsRow)
            Dim columnValuesArray() As Object = New Object() {ProductName, GeneratorName, JobSite, JobSiteAddress1, JobSiteAddress2, JobSiteCity, JobSiteState, JobSiteZip, TransporterName, DisposalFacilityName, HWNumber, IsManifest, ManifestNo, Attn, DriverName, DriverRemarks, JobPO, JobTicketNo, ScheduleDate, SpecialInstructions_T, TicketNo, TruckNo, ApprovalNoManifestText}
            rowtblJobTicketsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblJobTicketsRow)
            Return rowtblJobTicketsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblJobTicketsDataTable = CType(MyBase.Clone,tblJobTicketsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblJobTicketsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnProductName = MyBase.Columns("ProductName")
            Me.columnGeneratorName = MyBase.Columns("GeneratorName")
            Me.columnJobSite = MyBase.Columns("JobSite")
            Me.columnJobSiteAddress1 = MyBase.Columns("JobSiteAddress1")
            Me.columnJobSiteAddress2 = MyBase.Columns("JobSiteAddress2")
            Me.columnJobSiteCity = MyBase.Columns("JobSiteCity")
            Me.columnJobSiteState = MyBase.Columns("JobSiteState")
            Me.columnJobSiteZip = MyBase.Columns("JobSiteZip")
            Me.columnTransporterName = MyBase.Columns("TransporterName")
            Me.columnDisposalFacilityName = MyBase.Columns("DisposalFacilityName")
            Me.columnHWNumber = MyBase.Columns("HWNumber")
            Me.columnIsManifest = MyBase.Columns("IsManifest")
            Me.columnManifestNo = MyBase.Columns("ManifestNo")
            Me.columnAttn = MyBase.Columns("Attn")
            Me.columnDriverName = MyBase.Columns("DriverName")
            Me.columnDriverRemarks = MyBase.Columns("DriverRemarks")
            Me.columnJobPO = MyBase.Columns("JobPO")
            Me.columnJobTicketNo = MyBase.Columns("JobTicketNo")
            Me.columnScheduleDate = MyBase.Columns("ScheduleDate")
            Me.columnSpecialInstructions_T = MyBase.Columns("SpecialInstructions_T")
            Me.columnTicketNo = MyBase.Columns("TicketNo")
            Me.columnTruckNo = MyBase.Columns("TruckNo")
            Me.columnApprovalNoManifestText = MyBase.Columns("ApprovalNoManifestText")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnProductName = New Global.System.Data.DataColumn("ProductName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProductName)
            Me.columnGeneratorName = New Global.System.Data.DataColumn("GeneratorName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGeneratorName)
            Me.columnJobSite = New Global.System.Data.DataColumn("JobSite", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJobSite)
            Me.columnJobSiteAddress1 = New Global.System.Data.DataColumn("JobSiteAddress1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJobSiteAddress1)
            Me.columnJobSiteAddress2 = New Global.System.Data.DataColumn("JobSiteAddress2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJobSiteAddress2)
            Me.columnJobSiteCity = New Global.System.Data.DataColumn("JobSiteCity", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJobSiteCity)
            Me.columnJobSiteState = New Global.System.Data.DataColumn("JobSiteState", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJobSiteState)
            Me.columnJobSiteZip = New Global.System.Data.DataColumn("JobSiteZip", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJobSiteZip)
            Me.columnTransporterName = New Global.System.Data.DataColumn("TransporterName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTransporterName)
            Me.columnDisposalFacilityName = New Global.System.Data.DataColumn("DisposalFacilityName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDisposalFacilityName)
            Me.columnHWNumber = New Global.System.Data.DataColumn("HWNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHWNumber)
            Me.columnIsManifest = New Global.System.Data.DataColumn("IsManifest", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsManifest)
            Me.columnManifestNo = New Global.System.Data.DataColumn("ManifestNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnManifestNo)
            Me.columnAttn = New Global.System.Data.DataColumn("Attn", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAttn)
            Me.columnDriverName = New Global.System.Data.DataColumn("DriverName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDriverName)
            Me.columnDriverRemarks = New Global.System.Data.DataColumn("DriverRemarks", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDriverRemarks)
            Me.columnJobPO = New Global.System.Data.DataColumn("JobPO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJobPO)
            Me.columnJobTicketNo = New Global.System.Data.DataColumn("JobTicketNo", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJobTicketNo)
            Me.columnScheduleDate = New Global.System.Data.DataColumn("ScheduleDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnScheduleDate)
            Me.columnSpecialInstructions_T = New Global.System.Data.DataColumn("SpecialInstructions_T", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSpecialInstructions_T)
            Me.columnTicketNo = New Global.System.Data.DataColumn("TicketNo", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTicketNo)
            Me.columnTruckNo = New Global.System.Data.DataColumn("TruckNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTruckNo)
            Me.columnApprovalNoManifestText = New Global.System.Data.DataColumn("ApprovalNoManifestText", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnApprovalNoManifestText)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewtblJobTicketsRow() As tblJobTicketsRow
            Return CType(Me.NewRow,tblJobTicketsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblJobTicketsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblJobTicketsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblJobTicketsRowChangedEvent) Is Nothing) Then
                RaiseEvent tblJobTicketsRowChanged(Me, New tblJobTicketsRowChangeEvent(CType(e.Row,tblJobTicketsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblJobTicketsRowChangingEvent) Is Nothing) Then
                RaiseEvent tblJobTicketsRowChanging(Me, New tblJobTicketsRowChangeEvent(CType(e.Row,tblJobTicketsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblJobTicketsRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblJobTicketsRowDeleted(Me, New tblJobTicketsRowChangeEvent(CType(e.Row,tblJobTicketsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblJobTicketsRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblJobTicketsRowDeleting(Me, New tblJobTicketsRowChangeEvent(CType(e.Row,tblJobTicketsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovetblJobTicketsRow(ByVal row As tblJobTicketsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSJobTickets_P = New DSJobTickets_P
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblJobTicketsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tblJobTicketsRow
        Inherits Global.System.Data.DataRow
        
        Private tabletblJobTickets As tblJobTicketsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblJobTickets = CType(Me.Table,tblJobTicketsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProductName() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblJobTickets.ProductNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ProductName' in table 'tblJobTickets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblJobTickets.ProductNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GeneratorName() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblJobTickets.GeneratorNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GeneratorName' in table 'tblJobTickets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblJobTickets.GeneratorNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JobSite() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblJobTickets.JobSiteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JobSite' in table 'tblJobTickets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblJobTickets.JobSiteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JobSiteAddress1() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblJobTickets.JobSiteAddress1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JobSiteAddress1' in table 'tblJobTickets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblJobTickets.JobSiteAddress1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JobSiteAddress2() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblJobTickets.JobSiteAddress2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JobSiteAddress2' in table 'tblJobTickets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblJobTickets.JobSiteAddress2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JobSiteCity() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblJobTickets.JobSiteCityColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JobSiteCity' in table 'tblJobTickets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblJobTickets.JobSiteCityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JobSiteState() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblJobTickets.JobSiteStateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JobSiteState' in table 'tblJobTickets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblJobTickets.JobSiteStateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JobSiteZip() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblJobTickets.JobSiteZipColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JobSiteZip' in table 'tblJobTickets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblJobTickets.JobSiteZipColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TransporterName() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblJobTickets.TransporterNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TransporterName' in table 'tblJobTickets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblJobTickets.TransporterNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DisposalFacilityName() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblJobTickets.DisposalFacilityNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DisposalFacilityName' in table 'tblJobTickets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblJobTickets.DisposalFacilityNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HWNumber() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblJobTickets.HWNumberColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HWNumber' in table 'tblJobTickets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblJobTickets.HWNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsManifest() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblJobTickets.IsManifestColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IsManifest' in table 'tblJobTickets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblJobTickets.IsManifestColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ManifestNo() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblJobTickets.ManifestNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ManifestNo' in table 'tblJobTickets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblJobTickets.ManifestNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Attn() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblJobTickets.AttnColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Attn' in table 'tblJobTickets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblJobTickets.AttnColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DriverName() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblJobTickets.DriverNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DriverName' in table 'tblJobTickets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblJobTickets.DriverNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DriverRemarks() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblJobTickets.DriverRemarksColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DriverRemarks' in table 'tblJobTickets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblJobTickets.DriverRemarksColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JobPO() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblJobTickets.JobPOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JobPO' in table 'tblJobTickets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblJobTickets.JobPOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JobTicketNo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblJobTickets.JobTicketNoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JobTicketNo' in table 'tblJobTickets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblJobTickets.JobTicketNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ScheduleDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblJobTickets.ScheduleDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ScheduleDate' in table 'tblJobTickets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblJobTickets.ScheduleDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SpecialInstructions_T() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblJobTickets.SpecialInstructions_TColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SpecialInstructions_T' in table 'tblJobTickets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblJobTickets.SpecialInstructions_TColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TicketNo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblJobTickets.TicketNoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TicketNo' in table 'tblJobTickets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblJobTickets.TicketNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TruckNo() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblJobTickets.TruckNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TruckNo' in table 'tblJobTickets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblJobTickets.TruckNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ApprovalNoManifestText() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblJobTickets.ApprovalNoManifestTextColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ApprovalNoManifestText' in table 'tblJobTickets' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tabletblJobTickets.ApprovalNoManifestTextColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProductNameNull() As Boolean
            Return Me.IsNull(Me.tabletblJobTickets.ProductNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProductNameNull()
            Me(Me.tabletblJobTickets.ProductNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGeneratorNameNull() As Boolean
            Return Me.IsNull(Me.tabletblJobTickets.GeneratorNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGeneratorNameNull()
            Me(Me.tabletblJobTickets.GeneratorNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJobSiteNull() As Boolean
            Return Me.IsNull(Me.tabletblJobTickets.JobSiteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJobSiteNull()
            Me(Me.tabletblJobTickets.JobSiteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJobSiteAddress1Null() As Boolean
            Return Me.IsNull(Me.tabletblJobTickets.JobSiteAddress1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJobSiteAddress1Null()
            Me(Me.tabletblJobTickets.JobSiteAddress1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJobSiteAddress2Null() As Boolean
            Return Me.IsNull(Me.tabletblJobTickets.JobSiteAddress2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJobSiteAddress2Null()
            Me(Me.tabletblJobTickets.JobSiteAddress2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJobSiteCityNull() As Boolean
            Return Me.IsNull(Me.tabletblJobTickets.JobSiteCityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJobSiteCityNull()
            Me(Me.tabletblJobTickets.JobSiteCityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJobSiteStateNull() As Boolean
            Return Me.IsNull(Me.tabletblJobTickets.JobSiteStateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJobSiteStateNull()
            Me(Me.tabletblJobTickets.JobSiteStateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJobSiteZipNull() As Boolean
            Return Me.IsNull(Me.tabletblJobTickets.JobSiteZipColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJobSiteZipNull()
            Me(Me.tabletblJobTickets.JobSiteZipColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTransporterNameNull() As Boolean
            Return Me.IsNull(Me.tabletblJobTickets.TransporterNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTransporterNameNull()
            Me(Me.tabletblJobTickets.TransporterNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDisposalFacilityNameNull() As Boolean
            Return Me.IsNull(Me.tabletblJobTickets.DisposalFacilityNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDisposalFacilityNameNull()
            Me(Me.tabletblJobTickets.DisposalFacilityNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHWNumberNull() As Boolean
            Return Me.IsNull(Me.tabletblJobTickets.HWNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHWNumberNull()
            Me(Me.tabletblJobTickets.HWNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIsManifestNull() As Boolean
            Return Me.IsNull(Me.tabletblJobTickets.IsManifestColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIsManifestNull()
            Me(Me.tabletblJobTickets.IsManifestColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsManifestNoNull() As Boolean
            Return Me.IsNull(Me.tabletblJobTickets.ManifestNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetManifestNoNull()
            Me(Me.tabletblJobTickets.ManifestNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAttnNull() As Boolean
            Return Me.IsNull(Me.tabletblJobTickets.AttnColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAttnNull()
            Me(Me.tabletblJobTickets.AttnColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDriverNameNull() As Boolean
            Return Me.IsNull(Me.tabletblJobTickets.DriverNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDriverNameNull()
            Me(Me.tabletblJobTickets.DriverNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDriverRemarksNull() As Boolean
            Return Me.IsNull(Me.tabletblJobTickets.DriverRemarksColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDriverRemarksNull()
            Me(Me.tabletblJobTickets.DriverRemarksColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJobPONull() As Boolean
            Return Me.IsNull(Me.tabletblJobTickets.JobPOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJobPONull()
            Me(Me.tabletblJobTickets.JobPOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJobTicketNoNull() As Boolean
            Return Me.IsNull(Me.tabletblJobTickets.JobTicketNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJobTicketNoNull()
            Me(Me.tabletblJobTickets.JobTicketNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsScheduleDateNull() As Boolean
            Return Me.IsNull(Me.tabletblJobTickets.ScheduleDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetScheduleDateNull()
            Me(Me.tabletblJobTickets.ScheduleDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSpecialInstructions_TNull() As Boolean
            Return Me.IsNull(Me.tabletblJobTickets.SpecialInstructions_TColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSpecialInstructions_TNull()
            Me(Me.tabletblJobTickets.SpecialInstructions_TColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTicketNoNull() As Boolean
            Return Me.IsNull(Me.tabletblJobTickets.TicketNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTicketNoNull()
            Me(Me.tabletblJobTickets.TicketNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTruckNoNull() As Boolean
            Return Me.IsNull(Me.tabletblJobTickets.TruckNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTruckNoNull()
            Me(Me.tabletblJobTickets.TruckNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsApprovalNoManifestTextNull() As Boolean
            Return Me.IsNull(Me.tabletblJobTickets.ApprovalNoManifestTextColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetApprovalNoManifestTextNull()
            Me(Me.tabletblJobTickets.ApprovalNoManifestTextColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tblJobTicketsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblJobTicketsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tblJobTicketsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tblJobTicketsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
