'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.5420
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DSNonHazardous"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DSNonHazardous
    Inherits Global.System.Data.DataSet
    
    Private tabletblJobTickets As tblJobTicketsDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("tblJobTickets")) Is Nothing) Then
                MyBase.Tables.Add(New tblJobTicketsDataTable(ds.Tables("tblJobTickets")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblJobTickets() As tblJobTicketsDataTable
        Get
            Return Me.tabletblJobTickets
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DSNonHazardous = CType(MyBase.Clone,DSNonHazardous)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("tblJobTickets")) Is Nothing) Then
                MyBase.Tables.Add(New tblJobTicketsDataTable(ds.Tables("tblJobTickets")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tabletblJobTickets = CType(MyBase.Tables("tblJobTickets"),tblJobTicketsDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblJobTickets) Is Nothing) Then
                Me.tabletblJobTickets.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DSNonHazardous"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSNonHazardous.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tabletblJobTickets = New tblJobTicketsDataTable
        MyBase.Tables.Add(Me.tabletblJobTickets)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetblJobTickets() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DSNonHazardous = New DSNonHazardous
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub tblJobTicketsRowChangeEventHandler(ByVal sender As Object, ByVal e As tblJobTicketsRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblJobTicketsDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnJobSite As Global.System.Data.DataColumn
        
        Private columnJobSiteAddress1 As Global.System.Data.DataColumn
        
        Private columnJobSiteCity As Global.System.Data.DataColumn
        
        Private columnJobSiteState As Global.System.Data.DataColumn
        
        Private columnJobSiteZip As Global.System.Data.DataColumn
        
        Private columnContactPhone As Global.System.Data.DataColumn
        
        Private columnTransporterName As Global.System.Data.DataColumn
        
        Private columnT_USEPAID As Global.System.Data.DataColumn
        
        Private columnTPhone As Global.System.Data.DataColumn
        
        Private columnDisposalFacilityName As Global.System.Data.DataColumn
        
        Private columnFAddress1 As Global.System.Data.DataColumn
        
        Private columnFCity As Global.System.Data.DataColumn
        
        Private columnFState As Global.System.Data.DataColumn
        
        Private columnFZip As Global.System.Data.DataColumn
        
        Private columnD_USEPAID As Global.System.Data.DataColumn
        
        Private columnFPhone As Global.System.Data.DataColumn
        
        Private columnProductName As Global.System.Data.DataColumn
        
        Private columnJobTicketID As Global.System.Data.DataColumn
        
        Private columnG_USEPAID As Global.System.Data.DataColumn
        
        Private columnG_ILNumber As Global.System.Data.DataColumn
        
        Private columnManifest_Description As Global.System.Data.DataColumn
        
        Private columnQuantity As Global.System.Data.DataColumn
        
        Private columnUOM As Global.System.Data.DataColumn
        
        Private columnApprovalNo As Global.System.Data.DataColumn
        
        Private columnMailingAddress1 As Global.System.Data.DataColumn
        
        Private columnMailingAddress2 As Global.System.Data.DataColumn
        
        Private columnMailingCity As Global.System.Data.DataColumn
        
        Private columnMailingName As Global.System.Data.DataColumn
        
        Private columnMailingState As Global.System.Data.DataColumn
        
        Private columnMailingZip As Global.System.Data.DataColumn
        
        Private columnProductDescription As Global.System.Data.DataColumn
        
        Private columnProductDescription1 As Global.System.Data.DataColumn
        
        Private columnT_ILNumber As Global.System.Data.DataColumn
        
        Private columnD_ILNumber As Global.System.Data.DataColumn
        
        Private columnType As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblJobTickets"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JobSiteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJobSite
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JobSiteAddress1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnJobSiteAddress1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JobSiteCityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJobSiteCity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JobSiteStateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJobSiteState
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JobSiteZipColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJobSiteZip
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ContactPhoneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContactPhone
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TransporterNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTransporterName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property T_USEPAIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnT_USEPAID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TPhoneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTPhone
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DisposalFacilityNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDisposalFacilityName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FAddress1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAddress1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FCityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFCity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FStateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFState
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FZipColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFZip
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property D_USEPAIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnD_USEPAID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPhoneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPhone
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProductNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProductName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JobTicketIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJobTicketID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property G_USEPAIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnG_USEPAID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property G_ILNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnG_ILNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Manifest_DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnManifest_Description
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QuantityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQuantity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UOMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUOM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ApprovalNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnApprovalNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MailingAddress1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnMailingAddress1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MailingAddress2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnMailingAddress2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MailingCityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMailingCity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MailingNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMailingName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MailingStateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMailingState
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MailingZipColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMailingZip
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProductDescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProductDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProductDescription1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnProductDescription1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property T_ILNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnT_ILNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property D_ILNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnD_ILNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblJobTicketsRow
            Get
                Return CType(Me.Rows(index),tblJobTicketsRow)
            End Get
        End Property
        
        Public Event tblJobTicketsRowChanging As tblJobTicketsRowChangeEventHandler
        
        Public Event tblJobTicketsRowChanged As tblJobTicketsRowChangeEventHandler
        
        Public Event tblJobTicketsRowDeleting As tblJobTicketsRowChangeEventHandler
        
        Public Event tblJobTicketsRowDeleted As tblJobTicketsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddtblJobTicketsRow(ByVal row As tblJobTicketsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddtblJobTicketsRow( _
                    ByVal JobSite As String,  _
                    ByVal JobSiteAddress1 As String,  _
                    ByVal JobSiteCity As String,  _
                    ByVal JobSiteState As String,  _
                    ByVal JobSiteZip As String,  _
                    ByVal ContactPhone As String,  _
                    ByVal TransporterName As String,  _
                    ByVal T_USEPAID As String,  _
                    ByVal TPhone As String,  _
                    ByVal DisposalFacilityName As String,  _
                    ByVal FAddress1 As String,  _
                    ByVal FCity As String,  _
                    ByVal FState As String,  _
                    ByVal FZip As String,  _
                    ByVal D_USEPAID As String,  _
                    ByVal FPhone As String,  _
                    ByVal ProductName As String,  _
                    ByVal G_USEPAID As String,  _
                    ByVal G_ILNumber As String,  _
                    ByVal Manifest_Description As String,  _
                    ByVal Quantity As Double,  _
                    ByVal UOM As String,  _
                    ByVal ApprovalNo As String,  _
                    ByVal MailingAddress1 As String,  _
                    ByVal MailingAddress2 As String,  _
                    ByVal MailingCity As String,  _
                    ByVal MailingName As String,  _
                    ByVal MailingState As String,  _
                    ByVal MailingZip As String,  _
                    ByVal ProductDescription As String,  _
                    ByVal ProductDescription1 As String,  _
                    ByVal T_ILNumber As String,  _
                    ByVal D_ILNumber As String,  _
                    ByVal Type As String) As tblJobTicketsRow
            Dim rowtblJobTicketsRow As tblJobTicketsRow = CType(Me.NewRow,tblJobTicketsRow)
            Dim columnValuesArray() As Object = New Object() {JobSite, JobSiteAddress1, JobSiteCity, JobSiteState, JobSiteZip, ContactPhone, TransporterName, T_USEPAID, TPhone, DisposalFacilityName, FAddress1, FCity, FState, FZip, D_USEPAID, FPhone, ProductName, Nothing, G_USEPAID, G_ILNumber, Manifest_Description, Quantity, UOM, ApprovalNo, MailingAddress1, MailingAddress2, MailingCity, MailingName, MailingState, MailingZip, ProductDescription, ProductDescription1, T_ILNumber, D_ILNumber, Type}
            rowtblJobTicketsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblJobTicketsRow)
            Return rowtblJobTicketsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblJobTicketsDataTable = CType(MyBase.Clone,tblJobTicketsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblJobTicketsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnJobSite = MyBase.Columns("JobSite")
            Me.columnJobSiteAddress1 = MyBase.Columns("JobSiteAddress1")
            Me.columnJobSiteCity = MyBase.Columns("JobSiteCity")
            Me.columnJobSiteState = MyBase.Columns("JobSiteState")
            Me.columnJobSiteZip = MyBase.Columns("JobSiteZip")
            Me.columnContactPhone = MyBase.Columns("ContactPhone")
            Me.columnTransporterName = MyBase.Columns("TransporterName")
            Me.columnT_USEPAID = MyBase.Columns("T_USEPAID")
            Me.columnTPhone = MyBase.Columns("TPhone")
            Me.columnDisposalFacilityName = MyBase.Columns("DisposalFacilityName")
            Me.columnFAddress1 = MyBase.Columns("FAddress1")
            Me.columnFCity = MyBase.Columns("FCity")
            Me.columnFState = MyBase.Columns("FState")
            Me.columnFZip = MyBase.Columns("FZip")
            Me.columnD_USEPAID = MyBase.Columns("D_USEPAID")
            Me.columnFPhone = MyBase.Columns("FPhone")
            Me.columnProductName = MyBase.Columns("ProductName")
            Me.columnJobTicketID = MyBase.Columns("JobTicketID")
            Me.columnG_USEPAID = MyBase.Columns("G_USEPAID")
            Me.columnG_ILNumber = MyBase.Columns("G_ILNumber")
            Me.columnManifest_Description = MyBase.Columns("Manifest_Description")
            Me.columnQuantity = MyBase.Columns("Quantity")
            Me.columnUOM = MyBase.Columns("UOM")
            Me.columnApprovalNo = MyBase.Columns("ApprovalNo")
            Me.columnMailingAddress1 = MyBase.Columns("MailingAddress1")
            Me.columnMailingAddress2 = MyBase.Columns("MailingAddress2")
            Me.columnMailingCity = MyBase.Columns("MailingCity")
            Me.columnMailingName = MyBase.Columns("MailingName")
            Me.columnMailingState = MyBase.Columns("MailingState")
            Me.columnMailingZip = MyBase.Columns("MailingZip")
            Me.columnProductDescription = MyBase.Columns("ProductDescription")
            Me.columnProductDescription1 = MyBase.Columns("ProductDescription1")
            Me.columnT_ILNumber = MyBase.Columns("T_ILNumber")
            Me.columnD_ILNumber = MyBase.Columns("D_ILNumber")
            Me.columnType = MyBase.Columns("Type")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnJobSite = New Global.System.Data.DataColumn("JobSite", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJobSite)
            Me.columnJobSiteAddress1 = New Global.System.Data.DataColumn("JobSiteAddress1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJobSiteAddress1)
            Me.columnJobSiteCity = New Global.System.Data.DataColumn("JobSiteCity", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJobSiteCity)
            Me.columnJobSiteState = New Global.System.Data.DataColumn("JobSiteState", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJobSiteState)
            Me.columnJobSiteZip = New Global.System.Data.DataColumn("JobSiteZip", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJobSiteZip)
            Me.columnContactPhone = New Global.System.Data.DataColumn("ContactPhone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContactPhone)
            Me.columnTransporterName = New Global.System.Data.DataColumn("TransporterName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTransporterName)
            Me.columnT_USEPAID = New Global.System.Data.DataColumn("T_USEPAID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnT_USEPAID)
            Me.columnTPhone = New Global.System.Data.DataColumn("TPhone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTPhone)
            Me.columnDisposalFacilityName = New Global.System.Data.DataColumn("DisposalFacilityName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDisposalFacilityName)
            Me.columnFAddress1 = New Global.System.Data.DataColumn("FAddress1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAddress1)
            Me.columnFCity = New Global.System.Data.DataColumn("FCity", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFCity)
            Me.columnFState = New Global.System.Data.DataColumn("FState", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFState)
            Me.columnFZip = New Global.System.Data.DataColumn("FZip", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFZip)
            Me.columnD_USEPAID = New Global.System.Data.DataColumn("D_USEPAID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnD_USEPAID)
            Me.columnFPhone = New Global.System.Data.DataColumn("FPhone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPhone)
            Me.columnProductName = New Global.System.Data.DataColumn("ProductName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProductName)
            Me.columnJobTicketID = New Global.System.Data.DataColumn("JobTicketID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJobTicketID)
            Me.columnG_USEPAID = New Global.System.Data.DataColumn("G_USEPAID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnG_USEPAID)
            Me.columnG_ILNumber = New Global.System.Data.DataColumn("G_ILNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnG_ILNumber)
            Me.columnManifest_Description = New Global.System.Data.DataColumn("Manifest_Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnManifest_Description)
            Me.columnQuantity = New Global.System.Data.DataColumn("Quantity", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQuantity)
            Me.columnUOM = New Global.System.Data.DataColumn("UOM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUOM)
            Me.columnApprovalNo = New Global.System.Data.DataColumn("ApprovalNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnApprovalNo)
            Me.columnMailingAddress1 = New Global.System.Data.DataColumn("MailingAddress1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMailingAddress1)
            Me.columnMailingAddress2 = New Global.System.Data.DataColumn("MailingAddress2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMailingAddress2)
            Me.columnMailingCity = New Global.System.Data.DataColumn("MailingCity", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMailingCity)
            Me.columnMailingName = New Global.System.Data.DataColumn("MailingName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMailingName)
            Me.columnMailingState = New Global.System.Data.DataColumn("MailingState", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMailingState)
            Me.columnMailingZip = New Global.System.Data.DataColumn("MailingZip", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMailingZip)
            Me.columnProductDescription = New Global.System.Data.DataColumn("ProductDescription", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProductDescription)
            Me.columnProductDescription1 = New Global.System.Data.DataColumn("ProductDescription1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProductDescription1)
            Me.columnT_ILNumber = New Global.System.Data.DataColumn("T_ILNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnT_ILNumber)
            Me.columnD_ILNumber = New Global.System.Data.DataColumn("D_ILNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnD_ILNumber)
            Me.columnType = New Global.System.Data.DataColumn("Type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnType)
            Me.columnJobTicketID.AutoIncrement = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewtblJobTicketsRow() As tblJobTicketsRow
            Return CType(Me.NewRow,tblJobTicketsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblJobTicketsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblJobTicketsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblJobTicketsRowChangedEvent) Is Nothing) Then
                RaiseEvent tblJobTicketsRowChanged(Me, New tblJobTicketsRowChangeEvent(CType(e.Row,tblJobTicketsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblJobTicketsRowChangingEvent) Is Nothing) Then
                RaiseEvent tblJobTicketsRowChanging(Me, New tblJobTicketsRowChangeEvent(CType(e.Row,tblJobTicketsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblJobTicketsRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblJobTicketsRowDeleted(Me, New tblJobTicketsRowChangeEvent(CType(e.Row,tblJobTicketsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblJobTicketsRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblJobTicketsRowDeleting(Me, New tblJobTicketsRowChangeEvent(CType(e.Row,tblJobTicketsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovetblJobTicketsRow(ByVal row As tblJobTicketsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSNonHazardous = New DSNonHazardous
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblJobTicketsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tblJobTicketsRow
        Inherits Global.System.Data.DataRow
        
        Private tabletblJobTickets As tblJobTicketsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblJobTickets = CType(Me.Table,tblJobTicketsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JobSite() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblJobTickets.JobSiteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JobSite' in table 'tblJobTickets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblJobTickets.JobSiteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JobSiteAddress1() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblJobTickets.JobSiteAddress1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JobSiteAddress1' in table 'tblJobTickets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblJobTickets.JobSiteAddress1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JobSiteCity() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblJobTickets.JobSiteCityColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JobSiteCity' in table 'tblJobTickets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblJobTickets.JobSiteCityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JobSiteState() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblJobTickets.JobSiteStateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JobSiteState' in table 'tblJobTickets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblJobTickets.JobSiteStateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JobSiteZip() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblJobTickets.JobSiteZipColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JobSiteZip' in table 'tblJobTickets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblJobTickets.JobSiteZipColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ContactPhone() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblJobTickets.ContactPhoneColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ContactPhone' in table 'tblJobTickets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblJobTickets.ContactPhoneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TransporterName() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblJobTickets.TransporterNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TransporterName' in table 'tblJobTickets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblJobTickets.TransporterNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property T_USEPAID() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblJobTickets.T_USEPAIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'T_USEPAID' in table 'tblJobTickets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblJobTickets.T_USEPAIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TPhone() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblJobTickets.TPhoneColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TPhone' in table 'tblJobTickets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblJobTickets.TPhoneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DisposalFacilityName() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblJobTickets.DisposalFacilityNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DisposalFacilityName' in table 'tblJobTickets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblJobTickets.DisposalFacilityNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FAddress1() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblJobTickets.FAddress1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FAddress1' in table 'tblJobTickets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblJobTickets.FAddress1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FCity() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblJobTickets.FCityColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FCity' in table 'tblJobTickets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblJobTickets.FCityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FState() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblJobTickets.FStateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FState' in table 'tblJobTickets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblJobTickets.FStateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FZip() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblJobTickets.FZipColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FZip' in table 'tblJobTickets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblJobTickets.FZipColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property D_USEPAID() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblJobTickets.D_USEPAIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'D_USEPAID' in table 'tblJobTickets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblJobTickets.D_USEPAIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPhone() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblJobTickets.FPhoneColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FPhone' in table 'tblJobTickets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblJobTickets.FPhoneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProductName() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblJobTickets.ProductNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ProductName' in table 'tblJobTickets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblJobTickets.ProductNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JobTicketID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblJobTickets.JobTicketIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JobTicketID' in table 'tblJobTickets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblJobTickets.JobTicketIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property G_USEPAID() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblJobTickets.G_USEPAIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'G_USEPAID' in table 'tblJobTickets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblJobTickets.G_USEPAIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property G_ILNumber() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblJobTickets.G_ILNumberColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'G_ILNumber' in table 'tblJobTickets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblJobTickets.G_ILNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Manifest_Description() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblJobTickets.Manifest_DescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Manifest_Description' in table 'tblJobTickets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblJobTickets.Manifest_DescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Quantity() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblJobTickets.QuantityColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Quantity' in table 'tblJobTickets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblJobTickets.QuantityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UOM() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblJobTickets.UOMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UOM' in table 'tblJobTickets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblJobTickets.UOMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ApprovalNo() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblJobTickets.ApprovalNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ApprovalNo' in table 'tblJobTickets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblJobTickets.ApprovalNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MailingAddress1() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblJobTickets.MailingAddress1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MailingAddress1' in table 'tblJobTickets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblJobTickets.MailingAddress1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MailingAddress2() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblJobTickets.MailingAddress2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MailingAddress2' in table 'tblJobTickets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblJobTickets.MailingAddress2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MailingCity() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblJobTickets.MailingCityColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MailingCity' in table 'tblJobTickets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblJobTickets.MailingCityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MailingName() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblJobTickets.MailingNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MailingName' in table 'tblJobTickets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblJobTickets.MailingNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MailingState() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblJobTickets.MailingStateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MailingState' in table 'tblJobTickets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblJobTickets.MailingStateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MailingZip() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblJobTickets.MailingZipColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MailingZip' in table 'tblJobTickets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblJobTickets.MailingZipColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProductDescription() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblJobTickets.ProductDescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ProductDescription' in table 'tblJobTickets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblJobTickets.ProductDescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProductDescription1() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblJobTickets.ProductDescription1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ProductDescription1' in table 'tblJobTickets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblJobTickets.ProductDescription1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property T_ILNumber() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblJobTickets.T_ILNumberColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'T_ILNumber' in table 'tblJobTickets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblJobTickets.T_ILNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property D_ILNumber() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblJobTickets.D_ILNumberColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'D_ILNumber' in table 'tblJobTickets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblJobTickets.D_ILNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Type() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblJobTickets.TypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Type' in table 'tblJobTickets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblJobTickets.TypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJobSiteNull() As Boolean
            Return Me.IsNull(Me.tabletblJobTickets.JobSiteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJobSiteNull()
            Me(Me.tabletblJobTickets.JobSiteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJobSiteAddress1Null() As Boolean
            Return Me.IsNull(Me.tabletblJobTickets.JobSiteAddress1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJobSiteAddress1Null()
            Me(Me.tabletblJobTickets.JobSiteAddress1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJobSiteCityNull() As Boolean
            Return Me.IsNull(Me.tabletblJobTickets.JobSiteCityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJobSiteCityNull()
            Me(Me.tabletblJobTickets.JobSiteCityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJobSiteStateNull() As Boolean
            Return Me.IsNull(Me.tabletblJobTickets.JobSiteStateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJobSiteStateNull()
            Me(Me.tabletblJobTickets.JobSiteStateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJobSiteZipNull() As Boolean
            Return Me.IsNull(Me.tabletblJobTickets.JobSiteZipColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJobSiteZipNull()
            Me(Me.tabletblJobTickets.JobSiteZipColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsContactPhoneNull() As Boolean
            Return Me.IsNull(Me.tabletblJobTickets.ContactPhoneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetContactPhoneNull()
            Me(Me.tabletblJobTickets.ContactPhoneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTransporterNameNull() As Boolean
            Return Me.IsNull(Me.tabletblJobTickets.TransporterNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTransporterNameNull()
            Me(Me.tabletblJobTickets.TransporterNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsT_USEPAIDNull() As Boolean
            Return Me.IsNull(Me.tabletblJobTickets.T_USEPAIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetT_USEPAIDNull()
            Me(Me.tabletblJobTickets.T_USEPAIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTPhoneNull() As Boolean
            Return Me.IsNull(Me.tabletblJobTickets.TPhoneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTPhoneNull()
            Me(Me.tabletblJobTickets.TPhoneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDisposalFacilityNameNull() As Boolean
            Return Me.IsNull(Me.tabletblJobTickets.DisposalFacilityNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDisposalFacilityNameNull()
            Me(Me.tabletblJobTickets.DisposalFacilityNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFAddress1Null() As Boolean
            Return Me.IsNull(Me.tabletblJobTickets.FAddress1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFAddress1Null()
            Me(Me.tabletblJobTickets.FAddress1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFCityNull() As Boolean
            Return Me.IsNull(Me.tabletblJobTickets.FCityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFCityNull()
            Me(Me.tabletblJobTickets.FCityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFStateNull() As Boolean
            Return Me.IsNull(Me.tabletblJobTickets.FStateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFStateNull()
            Me(Me.tabletblJobTickets.FStateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFZipNull() As Boolean
            Return Me.IsNull(Me.tabletblJobTickets.FZipColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFZipNull()
            Me(Me.tabletblJobTickets.FZipColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsD_USEPAIDNull() As Boolean
            Return Me.IsNull(Me.tabletblJobTickets.D_USEPAIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetD_USEPAIDNull()
            Me(Me.tabletblJobTickets.D_USEPAIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFPhoneNull() As Boolean
            Return Me.IsNull(Me.tabletblJobTickets.FPhoneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFPhoneNull()
            Me(Me.tabletblJobTickets.FPhoneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProductNameNull() As Boolean
            Return Me.IsNull(Me.tabletblJobTickets.ProductNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProductNameNull()
            Me(Me.tabletblJobTickets.ProductNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJobTicketIDNull() As Boolean
            Return Me.IsNull(Me.tabletblJobTickets.JobTicketIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJobTicketIDNull()
            Me(Me.tabletblJobTickets.JobTicketIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsG_USEPAIDNull() As Boolean
            Return Me.IsNull(Me.tabletblJobTickets.G_USEPAIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetG_USEPAIDNull()
            Me(Me.tabletblJobTickets.G_USEPAIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsG_ILNumberNull() As Boolean
            Return Me.IsNull(Me.tabletblJobTickets.G_ILNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetG_ILNumberNull()
            Me(Me.tabletblJobTickets.G_ILNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsManifest_DescriptionNull() As Boolean
            Return Me.IsNull(Me.tabletblJobTickets.Manifest_DescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetManifest_DescriptionNull()
            Me(Me.tabletblJobTickets.Manifest_DescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQuantityNull() As Boolean
            Return Me.IsNull(Me.tabletblJobTickets.QuantityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQuantityNull()
            Me(Me.tabletblJobTickets.QuantityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUOMNull() As Boolean
            Return Me.IsNull(Me.tabletblJobTickets.UOMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUOMNull()
            Me(Me.tabletblJobTickets.UOMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsApprovalNoNull() As Boolean
            Return Me.IsNull(Me.tabletblJobTickets.ApprovalNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetApprovalNoNull()
            Me(Me.tabletblJobTickets.ApprovalNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMailingAddress1Null() As Boolean
            Return Me.IsNull(Me.tabletblJobTickets.MailingAddress1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMailingAddress1Null()
            Me(Me.tabletblJobTickets.MailingAddress1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMailingAddress2Null() As Boolean
            Return Me.IsNull(Me.tabletblJobTickets.MailingAddress2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMailingAddress2Null()
            Me(Me.tabletblJobTickets.MailingAddress2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMailingCityNull() As Boolean
            Return Me.IsNull(Me.tabletblJobTickets.MailingCityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMailingCityNull()
            Me(Me.tabletblJobTickets.MailingCityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMailingNameNull() As Boolean
            Return Me.IsNull(Me.tabletblJobTickets.MailingNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMailingNameNull()
            Me(Me.tabletblJobTickets.MailingNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMailingStateNull() As Boolean
            Return Me.IsNull(Me.tabletblJobTickets.MailingStateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMailingStateNull()
            Me(Me.tabletblJobTickets.MailingStateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMailingZipNull() As Boolean
            Return Me.IsNull(Me.tabletblJobTickets.MailingZipColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMailingZipNull()
            Me(Me.tabletblJobTickets.MailingZipColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProductDescriptionNull() As Boolean
            Return Me.IsNull(Me.tabletblJobTickets.ProductDescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProductDescriptionNull()
            Me(Me.tabletblJobTickets.ProductDescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProductDescription1Null() As Boolean
            Return Me.IsNull(Me.tabletblJobTickets.ProductDescription1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProductDescription1Null()
            Me(Me.tabletblJobTickets.ProductDescription1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsT_ILNumberNull() As Boolean
            Return Me.IsNull(Me.tabletblJobTickets.T_ILNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetT_ILNumberNull()
            Me(Me.tabletblJobTickets.T_ILNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsD_ILNumberNull() As Boolean
            Return Me.IsNull(Me.tabletblJobTickets.D_ILNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetD_ILNumberNull()
            Me(Me.tabletblJobTickets.D_ILNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTypeNull() As Boolean
            Return Me.IsNull(Me.tabletblJobTickets.TypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTypeNull()
            Me(Me.tabletblJobTickets.TypeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tblJobTicketsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblJobTicketsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tblJobTicketsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tblJobTicketsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
