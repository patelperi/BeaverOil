'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.5420
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DSListProducts"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DSListProducts
    Inherits Global.System.Data.DataSet
    
    Private tabletblProducts As tblProductsDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("tblProducts")) Is Nothing) Then
                MyBase.Tables.Add(New tblProductsDataTable(ds.Tables("tblProducts")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblProducts() As tblProductsDataTable
        Get
            Return Me.tabletblProducts
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DSListProducts = CType(MyBase.Clone,DSListProducts)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("tblProducts")) Is Nothing) Then
                MyBase.Tables.Add(New tblProductsDataTable(ds.Tables("tblProducts")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tabletblProducts = CType(MyBase.Tables("tblProducts"),tblProductsDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblProducts) Is Nothing) Then
                Me.tabletblProducts.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DSListProducts"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSListProducts.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tabletblProducts = New tblProductsDataTable
        MyBase.Tables.Add(Me.tabletblProducts)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetblProducts() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DSListProducts = New DSListProducts
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub tblProductsRowChangeEventHandler(ByVal sender As Object, ByVal e As tblProductsRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblProductsDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnProductID As Global.System.Data.DataColumn
        
        Private columnProductName As Global.System.Data.DataColumn
        
        Private columnGeneratorID As Global.System.Data.DataColumn
        
        Private columnGenProdNo As Global.System.Data.DataColumn
        
        Private columnType As Global.System.Data.DataColumn
        
        Private columnPaperwork_Required As Global.System.Data.DataColumn
        
        Private columnProductDescription As Global.System.Data.DataColumn
        
        Private columnNonHazardous As Global.System.Data.DataColumn
        
        Private columnBillOfLading As Global.System.Data.DataColumn
        
        Private columnHazardous As Global.System.Data.DataColumn
        
        Private columnJobTicket As Global.System.Data.DataColumn
        
        Private columnPlant2Manifest As Global.System.Data.DataColumn
        
        Private columnAnalyticalDate As Global.System.Data.DataColumn
        
        Private columnLabRecertDate As Global.System.Data.DataColumn
        
        Private columnTypeOfProduct As Global.System.Data.DataColumn
        
        Private columnGenNo As Global.System.Data.DataColumn
        
        Private columnFedNo As Global.System.Data.DataColumn
        
        Private columnApprovalNo As Global.System.Data.DataColumn
        
        Private columnTemplateFilePath As Global.System.Data.DataColumn
        
        Private columnFileName As Global.System.Data.DataColumn
        
        Private columnActive As Global.System.Data.DataColumn
        
        Private columnSpecialInstructions As Global.System.Data.DataColumn
        
        Private columnHWNumber As Global.System.Data.DataColumn
        
        Private columnPermitNo As Global.System.Data.DataColumn
        
        Private columnS_O As Global.System.Data.DataColumn
        
        Private columnGeneratorName As Global.System.Data.DataColumn
        
        Private columnJobSite As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblProducts"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProductIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProductID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProductNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProductName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GeneratorIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGeneratorID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GenProdNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGenProdNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Paperwork_RequiredColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPaperwork_Required
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProductDescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProductDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NonHazardousColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNonHazardous
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BillOfLadingColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBillOfLading
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HazardousColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHazardous
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JobTicketColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJobTicket
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Plant2ManifestColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPlant2Manifest
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AnalyticalDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAnalyticalDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LabRecertDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLabRecertDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TypeOfProductColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTypeOfProduct
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GenNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGenNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FedNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFedNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ApprovalNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnApprovalNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TemplateFilePathColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTemplateFilePath
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FileNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFileName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ActiveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnActive
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SpecialInstructionsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSpecialInstructions
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HWNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHWNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PermitNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPermitNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property S_OColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnS_O
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GeneratorNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGeneratorName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JobSiteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJobSite
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblProductsRow
            Get
                Return CType(Me.Rows(index),tblProductsRow)
            End Get
        End Property
        
        Public Event tblProductsRowChanging As tblProductsRowChangeEventHandler
        
        Public Event tblProductsRowChanged As tblProductsRowChangeEventHandler
        
        Public Event tblProductsRowDeleting As tblProductsRowChangeEventHandler
        
        Public Event tblProductsRowDeleted As tblProductsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddtblProductsRow(ByVal row As tblProductsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddtblProductsRow( _
                    ByVal ProductName As String,  _
                    ByVal GeneratorID As Integer,  _
                    ByVal GenProdNo As String,  _
                    ByVal Type As String,  _
                    ByVal Paperwork_Required As Boolean,  _
                    ByVal ProductDescription As String,  _
                    ByVal NonHazardous As Boolean,  _
                    ByVal BillOfLading As Boolean,  _
                    ByVal Hazardous As Boolean,  _
                    ByVal JobTicket As Boolean,  _
                    ByVal Plant2Manifest As Boolean,  _
                    ByVal AnalyticalDate As String,  _
                    ByVal LabRecertDate As String,  _
                    ByVal TypeOfProduct As Single,  _
                    ByVal GenNo As String,  _
                    ByVal FedNo As String,  _
                    ByVal ApprovalNo As String,  _
                    ByVal TemplateFilePath As String,  _
                    ByVal FileName As String,  _
                    ByVal Active As Boolean,  _
                    ByVal SpecialInstructions As String,  _
                    ByVal HWNumber As String,  _
                    ByVal PermitNo As String,  _
                    ByVal S_O As String,  _
                    ByVal GeneratorName As String,  _
                    ByVal JobSite As String) As tblProductsRow
            Dim rowtblProductsRow As tblProductsRow = CType(Me.NewRow,tblProductsRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, ProductName, GeneratorID, GenProdNo, Type, Paperwork_Required, ProductDescription, NonHazardous, BillOfLading, Hazardous, JobTicket, Plant2Manifest, AnalyticalDate, LabRecertDate, TypeOfProduct, GenNo, FedNo, ApprovalNo, TemplateFilePath, FileName, Active, SpecialInstructions, HWNumber, PermitNo, S_O, GeneratorName, JobSite}
            rowtblProductsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblProductsRow)
            Return rowtblProductsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblProductsDataTable = CType(MyBase.Clone,tblProductsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblProductsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnProductID = MyBase.Columns("ProductID")
            Me.columnProductName = MyBase.Columns("ProductName")
            Me.columnGeneratorID = MyBase.Columns("GeneratorID")
            Me.columnGenProdNo = MyBase.Columns("GenProdNo")
            Me.columnType = MyBase.Columns("Type")
            Me.columnPaperwork_Required = MyBase.Columns("Paperwork_Required")
            Me.columnProductDescription = MyBase.Columns("ProductDescription")
            Me.columnNonHazardous = MyBase.Columns("NonHazardous")
            Me.columnBillOfLading = MyBase.Columns("BillOfLading")
            Me.columnHazardous = MyBase.Columns("Hazardous")
            Me.columnJobTicket = MyBase.Columns("JobTicket")
            Me.columnPlant2Manifest = MyBase.Columns("Plant2Manifest")
            Me.columnAnalyticalDate = MyBase.Columns("AnalyticalDate")
            Me.columnLabRecertDate = MyBase.Columns("LabRecertDate")
            Me.columnTypeOfProduct = MyBase.Columns("TypeOfProduct")
            Me.columnGenNo = MyBase.Columns("GenNo")
            Me.columnFedNo = MyBase.Columns("FedNo")
            Me.columnApprovalNo = MyBase.Columns("ApprovalNo")
            Me.columnTemplateFilePath = MyBase.Columns("TemplateFilePath")
            Me.columnFileName = MyBase.Columns("FileName")
            Me.columnActive = MyBase.Columns("Active")
            Me.columnSpecialInstructions = MyBase.Columns("SpecialInstructions")
            Me.columnHWNumber = MyBase.Columns("HWNumber")
            Me.columnPermitNo = MyBase.Columns("PermitNo")
            Me.columnS_O = MyBase.Columns("S_O")
            Me.columnGeneratorName = MyBase.Columns("GeneratorName")
            Me.columnJobSite = MyBase.Columns("JobSite")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnProductID = New Global.System.Data.DataColumn("ProductID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProductID)
            Me.columnProductName = New Global.System.Data.DataColumn("ProductName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProductName)
            Me.columnGeneratorID = New Global.System.Data.DataColumn("GeneratorID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGeneratorID)
            Me.columnGenProdNo = New Global.System.Data.DataColumn("GenProdNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGenProdNo)
            Me.columnType = New Global.System.Data.DataColumn("Type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnType)
            Me.columnPaperwork_Required = New Global.System.Data.DataColumn("Paperwork_Required", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPaperwork_Required)
            Me.columnProductDescription = New Global.System.Data.DataColumn("ProductDescription", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProductDescription)
            Me.columnNonHazardous = New Global.System.Data.DataColumn("NonHazardous", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNonHazardous)
            Me.columnBillOfLading = New Global.System.Data.DataColumn("BillOfLading", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBillOfLading)
            Me.columnHazardous = New Global.System.Data.DataColumn("Hazardous", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHazardous)
            Me.columnJobTicket = New Global.System.Data.DataColumn("JobTicket", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJobTicket)
            Me.columnPlant2Manifest = New Global.System.Data.DataColumn("Plant2Manifest", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlant2Manifest)
            Me.columnAnalyticalDate = New Global.System.Data.DataColumn("AnalyticalDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAnalyticalDate)
            Me.columnLabRecertDate = New Global.System.Data.DataColumn("LabRecertDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLabRecertDate)
            Me.columnTypeOfProduct = New Global.System.Data.DataColumn("TypeOfProduct", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTypeOfProduct)
            Me.columnGenNo = New Global.System.Data.DataColumn("GenNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGenNo)
            Me.columnFedNo = New Global.System.Data.DataColumn("FedNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFedNo)
            Me.columnApprovalNo = New Global.System.Data.DataColumn("ApprovalNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnApprovalNo)
            Me.columnTemplateFilePath = New Global.System.Data.DataColumn("TemplateFilePath", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTemplateFilePath)
            Me.columnFileName = New Global.System.Data.DataColumn("FileName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFileName)
            Me.columnActive = New Global.System.Data.DataColumn("Active", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnActive)
            Me.columnSpecialInstructions = New Global.System.Data.DataColumn("SpecialInstructions", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSpecialInstructions)
            Me.columnHWNumber = New Global.System.Data.DataColumn("HWNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHWNumber)
            Me.columnPermitNo = New Global.System.Data.DataColumn("PermitNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPermitNo)
            Me.columnS_O = New Global.System.Data.DataColumn("S_O", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnS_O)
            Me.columnGeneratorName = New Global.System.Data.DataColumn("GeneratorName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGeneratorName)
            Me.columnJobSite = New Global.System.Data.DataColumn("JobSite", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJobSite)
            Me.columnProductID.AutoIncrement = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewtblProductsRow() As tblProductsRow
            Return CType(Me.NewRow,tblProductsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblProductsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblProductsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblProductsRowChangedEvent) Is Nothing) Then
                RaiseEvent tblProductsRowChanged(Me, New tblProductsRowChangeEvent(CType(e.Row,tblProductsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblProductsRowChangingEvent) Is Nothing) Then
                RaiseEvent tblProductsRowChanging(Me, New tblProductsRowChangeEvent(CType(e.Row,tblProductsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblProductsRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblProductsRowDeleted(Me, New tblProductsRowChangeEvent(CType(e.Row,tblProductsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblProductsRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblProductsRowDeleting(Me, New tblProductsRowChangeEvent(CType(e.Row,tblProductsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovetblProductsRow(ByVal row As tblProductsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSListProducts = New DSListProducts
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblProductsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tblProductsRow
        Inherits Global.System.Data.DataRow
        
        Private tabletblProducts As tblProductsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblProducts = CType(Me.Table,tblProductsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProductID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblProducts.ProductIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ProductID' in table 'tblProducts' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblProducts.ProductIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProductName() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblProducts.ProductNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ProductName' in table 'tblProducts' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblProducts.ProductNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GeneratorID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblProducts.GeneratorIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GeneratorID' in table 'tblProducts' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblProducts.GeneratorIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GenProdNo() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblProducts.GenProdNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GenProdNo' in table 'tblProducts' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblProducts.GenProdNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Type() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblProducts.TypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Type' in table 'tblProducts' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblProducts.TypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Paperwork_Required() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblProducts.Paperwork_RequiredColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Paperwork_Required' in table 'tblProducts' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblProducts.Paperwork_RequiredColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProductDescription() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblProducts.ProductDescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ProductDescription' in table 'tblProducts' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblProducts.ProductDescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NonHazardous() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblProducts.NonHazardousColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NonHazardous' in table 'tblProducts' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblProducts.NonHazardousColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BillOfLading() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblProducts.BillOfLadingColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BillOfLading' in table 'tblProducts' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblProducts.BillOfLadingColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Hazardous() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblProducts.HazardousColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Hazardous' in table 'tblProducts' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblProducts.HazardousColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JobTicket() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblProducts.JobTicketColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JobTicket' in table 'tblProducts' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblProducts.JobTicketColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Plant2Manifest() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblProducts.Plant2ManifestColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Plant2Manifest' in table 'tblProducts' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblProducts.Plant2ManifestColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AnalyticalDate() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblProducts.AnalyticalDateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AnalyticalDate' in table 'tblProducts' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblProducts.AnalyticalDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LabRecertDate() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblProducts.LabRecertDateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LabRecertDate' in table 'tblProducts' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblProducts.LabRecertDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TypeOfProduct() As Single
            Get
                Try 
                    Return CType(Me(Me.tabletblProducts.TypeOfProductColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TypeOfProduct' in table 'tblProducts' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblProducts.TypeOfProductColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GenNo() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblProducts.GenNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GenNo' in table 'tblProducts' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblProducts.GenNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FedNo() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblProducts.FedNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FedNo' in table 'tblProducts' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblProducts.FedNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ApprovalNo() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblProducts.ApprovalNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ApprovalNo' in table 'tblProducts' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblProducts.ApprovalNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TemplateFilePath() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblProducts.TemplateFilePathColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TemplateFilePath' in table 'tblProducts' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblProducts.TemplateFilePathColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FileName() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblProducts.FileNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FileName' in table 'tblProducts' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblProducts.FileNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Active() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblProducts.ActiveColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Active' in table 'tblProducts' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblProducts.ActiveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SpecialInstructions() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblProducts.SpecialInstructionsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SpecialInstructions' in table 'tblProducts' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblProducts.SpecialInstructionsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HWNumber() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblProducts.HWNumberColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HWNumber' in table 'tblProducts' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblProducts.HWNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PermitNo() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblProducts.PermitNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PermitNo' in table 'tblProducts' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblProducts.PermitNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property S_O() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblProducts.S_OColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'S_O' in table 'tblProducts' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblProducts.S_OColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GeneratorName() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblProducts.GeneratorNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GeneratorName' in table 'tblProducts' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblProducts.GeneratorNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JobSite() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblProducts.JobSiteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JobSite' in table 'tblProducts' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblProducts.JobSiteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProductIDNull() As Boolean
            Return Me.IsNull(Me.tabletblProducts.ProductIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProductIDNull()
            Me(Me.tabletblProducts.ProductIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProductNameNull() As Boolean
            Return Me.IsNull(Me.tabletblProducts.ProductNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProductNameNull()
            Me(Me.tabletblProducts.ProductNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGeneratorIDNull() As Boolean
            Return Me.IsNull(Me.tabletblProducts.GeneratorIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGeneratorIDNull()
            Me(Me.tabletblProducts.GeneratorIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGenProdNoNull() As Boolean
            Return Me.IsNull(Me.tabletblProducts.GenProdNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGenProdNoNull()
            Me(Me.tabletblProducts.GenProdNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTypeNull() As Boolean
            Return Me.IsNull(Me.tabletblProducts.TypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTypeNull()
            Me(Me.tabletblProducts.TypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPaperwork_RequiredNull() As Boolean
            Return Me.IsNull(Me.tabletblProducts.Paperwork_RequiredColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPaperwork_RequiredNull()
            Me(Me.tabletblProducts.Paperwork_RequiredColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProductDescriptionNull() As Boolean
            Return Me.IsNull(Me.tabletblProducts.ProductDescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProductDescriptionNull()
            Me(Me.tabletblProducts.ProductDescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNonHazardousNull() As Boolean
            Return Me.IsNull(Me.tabletblProducts.NonHazardousColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNonHazardousNull()
            Me(Me.tabletblProducts.NonHazardousColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBillOfLadingNull() As Boolean
            Return Me.IsNull(Me.tabletblProducts.BillOfLadingColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBillOfLadingNull()
            Me(Me.tabletblProducts.BillOfLadingColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHazardousNull() As Boolean
            Return Me.IsNull(Me.tabletblProducts.HazardousColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHazardousNull()
            Me(Me.tabletblProducts.HazardousColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJobTicketNull() As Boolean
            Return Me.IsNull(Me.tabletblProducts.JobTicketColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJobTicketNull()
            Me(Me.tabletblProducts.JobTicketColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPlant2ManifestNull() As Boolean
            Return Me.IsNull(Me.tabletblProducts.Plant2ManifestColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPlant2ManifestNull()
            Me(Me.tabletblProducts.Plant2ManifestColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAnalyticalDateNull() As Boolean
            Return Me.IsNull(Me.tabletblProducts.AnalyticalDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAnalyticalDateNull()
            Me(Me.tabletblProducts.AnalyticalDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLabRecertDateNull() As Boolean
            Return Me.IsNull(Me.tabletblProducts.LabRecertDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLabRecertDateNull()
            Me(Me.tabletblProducts.LabRecertDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTypeOfProductNull() As Boolean
            Return Me.IsNull(Me.tabletblProducts.TypeOfProductColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTypeOfProductNull()
            Me(Me.tabletblProducts.TypeOfProductColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGenNoNull() As Boolean
            Return Me.IsNull(Me.tabletblProducts.GenNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGenNoNull()
            Me(Me.tabletblProducts.GenNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFedNoNull() As Boolean
            Return Me.IsNull(Me.tabletblProducts.FedNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFedNoNull()
            Me(Me.tabletblProducts.FedNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsApprovalNoNull() As Boolean
            Return Me.IsNull(Me.tabletblProducts.ApprovalNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetApprovalNoNull()
            Me(Me.tabletblProducts.ApprovalNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTemplateFilePathNull() As Boolean
            Return Me.IsNull(Me.tabletblProducts.TemplateFilePathColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTemplateFilePathNull()
            Me(Me.tabletblProducts.TemplateFilePathColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFileNameNull() As Boolean
            Return Me.IsNull(Me.tabletblProducts.FileNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFileNameNull()
            Me(Me.tabletblProducts.FileNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsActiveNull() As Boolean
            Return Me.IsNull(Me.tabletblProducts.ActiveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetActiveNull()
            Me(Me.tabletblProducts.ActiveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSpecialInstructionsNull() As Boolean
            Return Me.IsNull(Me.tabletblProducts.SpecialInstructionsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSpecialInstructionsNull()
            Me(Me.tabletblProducts.SpecialInstructionsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHWNumberNull() As Boolean
            Return Me.IsNull(Me.tabletblProducts.HWNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHWNumberNull()
            Me(Me.tabletblProducts.HWNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPermitNoNull() As Boolean
            Return Me.IsNull(Me.tabletblProducts.PermitNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPermitNoNull()
            Me(Me.tabletblProducts.PermitNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsS_ONull() As Boolean
            Return Me.IsNull(Me.tabletblProducts.S_OColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetS_ONull()
            Me(Me.tabletblProducts.S_OColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGeneratorNameNull() As Boolean
            Return Me.IsNull(Me.tabletblProducts.GeneratorNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGeneratorNameNull()
            Me(Me.tabletblProducts.GeneratorNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJobSiteNull() As Boolean
            Return Me.IsNull(Me.tabletblProducts.JobSiteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJobSiteNull()
            Me(Me.tabletblProducts.JobSiteColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tblProductsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblProductsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tblProductsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tblProductsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
