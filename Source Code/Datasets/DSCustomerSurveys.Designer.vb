'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.5420
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DSCustomerSurveys"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DSCustomerSurveys
    Inherits Global.System.Data.DataSet
    
    Private tabletblJobTickets As tblJobTicketsDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("tblJobTickets")) Is Nothing) Then
                MyBase.Tables.Add(New tblJobTicketsDataTable(ds.Tables("tblJobTickets")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblJobTickets() As tblJobTicketsDataTable
        Get
            Return Me.tabletblJobTickets
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DSCustomerSurveys = CType(MyBase.Clone,DSCustomerSurveys)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("tblJobTickets")) Is Nothing) Then
                MyBase.Tables.Add(New tblJobTicketsDataTable(ds.Tables("tblJobTickets")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tabletblJobTickets = CType(MyBase.Tables("tblJobTickets"),tblJobTicketsDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblJobTickets) Is Nothing) Then
                Me.tabletblJobTickets.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DSCustomerSurveys"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSCustomerSurveys.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tabletblJobTickets = New tblJobTicketsDataTable
        MyBase.Tables.Add(Me.tabletblJobTickets)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetblJobTickets() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DSCustomerSurveys = New DSCustomerSurveys
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub tblJobTicketsRowChangeEventHandler(ByVal sender As Object, ByVal e As tblJobTicketsRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblJobTicketsDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnGeneratorName As Global.System.Data.DataColumn
        
        Private columnJobSite As Global.System.Data.DataColumn
        
        Private columnJobSiteAddress1 As Global.System.Data.DataColumn
        
        Private columnJobSiteCity As Global.System.Data.DataColumn
        
        Private columnJobSiteState As Global.System.Data.DataColumn
        
        Private columnJobSiteZip As Global.System.Data.DataColumn
        
        Private columnContactName As Global.System.Data.DataColumn
        
        Private columnContactPhone As Global.System.Data.DataColumn
        
        Private columnProductName As Global.System.Data.DataColumn
        
        Private columnBrokerName As Global.System.Data.DataColumn
        
        Private columnBrokerContact As Global.System.Data.DataColumn
        
        Private columnBrokerPhone As Global.System.Data.DataColumn
        
        Private columnBillingName As Global.System.Data.DataColumn
        
        Private columnBillingAddress1 As Global.System.Data.DataColumn
        
        Private columnBillingAddress2 As Global.System.Data.DataColumn
        
        Private columnBillingCity As Global.System.Data.DataColumn
        
        Private columnBillingState As Global.System.Data.DataColumn
        
        Private columnBillingZip As Global.System.Data.DataColumn
        
        Private columnProductDescription As Global.System.Data.DataColumn
        
        Private columnJobTicketID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblJobTickets"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GeneratorNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGeneratorName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JobSiteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJobSite
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JobSiteAddress1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnJobSiteAddress1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JobSiteCityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJobSiteCity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JobSiteStateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJobSiteState
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JobSiteZipColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJobSiteZip
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ContactNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContactName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ContactPhoneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContactPhone
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProductNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProductName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BrokerNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBrokerName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BrokerContactColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBrokerContact
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BrokerPhoneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBrokerPhone
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BillingNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBillingName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BillingAddress1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBillingAddress1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BillingAddress2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBillingAddress2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BillingCityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBillingCity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BillingStateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBillingState
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BillingZipColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBillingZip
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProductDescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProductDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JobTicketIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJobTicketID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblJobTicketsRow
            Get
                Return CType(Me.Rows(index),tblJobTicketsRow)
            End Get
        End Property
        
        Public Event tblJobTicketsRowChanging As tblJobTicketsRowChangeEventHandler
        
        Public Event tblJobTicketsRowChanged As tblJobTicketsRowChangeEventHandler
        
        Public Event tblJobTicketsRowDeleting As tblJobTicketsRowChangeEventHandler
        
        Public Event tblJobTicketsRowDeleted As tblJobTicketsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddtblJobTicketsRow(ByVal row As tblJobTicketsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddtblJobTicketsRow( _
                    ByVal GeneratorName As String,  _
                    ByVal JobSite As String,  _
                    ByVal JobSiteAddress1 As String,  _
                    ByVal JobSiteCity As String,  _
                    ByVal JobSiteState As String,  _
                    ByVal JobSiteZip As String,  _
                    ByVal ContactName As String,  _
                    ByVal ContactPhone As String,  _
                    ByVal ProductName As String,  _
                    ByVal BrokerName As String,  _
                    ByVal BrokerContact As String,  _
                    ByVal BrokerPhone As String,  _
                    ByVal BillingName As String,  _
                    ByVal BillingAddress1 As String,  _
                    ByVal BillingAddress2 As String,  _
                    ByVal BillingCity As String,  _
                    ByVal BillingState As String,  _
                    ByVal BillingZip As String,  _
                    ByVal ProductDescription As String) As tblJobTicketsRow
            Dim rowtblJobTicketsRow As tblJobTicketsRow = CType(Me.NewRow,tblJobTicketsRow)
            Dim columnValuesArray() As Object = New Object() {GeneratorName, JobSite, JobSiteAddress1, JobSiteCity, JobSiteState, JobSiteZip, ContactName, ContactPhone, ProductName, BrokerName, BrokerContact, BrokerPhone, BillingName, BillingAddress1, BillingAddress2, BillingCity, BillingState, BillingZip, ProductDescription, Nothing}
            rowtblJobTicketsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblJobTicketsRow)
            Return rowtblJobTicketsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblJobTicketsDataTable = CType(MyBase.Clone,tblJobTicketsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblJobTicketsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnGeneratorName = MyBase.Columns("GeneratorName")
            Me.columnJobSite = MyBase.Columns("JobSite")
            Me.columnJobSiteAddress1 = MyBase.Columns("JobSiteAddress1")
            Me.columnJobSiteCity = MyBase.Columns("JobSiteCity")
            Me.columnJobSiteState = MyBase.Columns("JobSiteState")
            Me.columnJobSiteZip = MyBase.Columns("JobSiteZip")
            Me.columnContactName = MyBase.Columns("ContactName")
            Me.columnContactPhone = MyBase.Columns("ContactPhone")
            Me.columnProductName = MyBase.Columns("ProductName")
            Me.columnBrokerName = MyBase.Columns("BrokerName")
            Me.columnBrokerContact = MyBase.Columns("BrokerContact")
            Me.columnBrokerPhone = MyBase.Columns("BrokerPhone")
            Me.columnBillingName = MyBase.Columns("BillingName")
            Me.columnBillingAddress1 = MyBase.Columns("BillingAddress1")
            Me.columnBillingAddress2 = MyBase.Columns("BillingAddress2")
            Me.columnBillingCity = MyBase.Columns("BillingCity")
            Me.columnBillingState = MyBase.Columns("BillingState")
            Me.columnBillingZip = MyBase.Columns("BillingZip")
            Me.columnProductDescription = MyBase.Columns("ProductDescription")
            Me.columnJobTicketID = MyBase.Columns("JobTicketID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnGeneratorName = New Global.System.Data.DataColumn("GeneratorName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGeneratorName)
            Me.columnJobSite = New Global.System.Data.DataColumn("JobSite", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJobSite)
            Me.columnJobSiteAddress1 = New Global.System.Data.DataColumn("JobSiteAddress1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJobSiteAddress1)
            Me.columnJobSiteCity = New Global.System.Data.DataColumn("JobSiteCity", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJobSiteCity)
            Me.columnJobSiteState = New Global.System.Data.DataColumn("JobSiteState", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJobSiteState)
            Me.columnJobSiteZip = New Global.System.Data.DataColumn("JobSiteZip", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJobSiteZip)
            Me.columnContactName = New Global.System.Data.DataColumn("ContactName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContactName)
            Me.columnContactPhone = New Global.System.Data.DataColumn("ContactPhone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContactPhone)
            Me.columnProductName = New Global.System.Data.DataColumn("ProductName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProductName)
            Me.columnBrokerName = New Global.System.Data.DataColumn("BrokerName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBrokerName)
            Me.columnBrokerContact = New Global.System.Data.DataColumn("BrokerContact", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBrokerContact)
            Me.columnBrokerPhone = New Global.System.Data.DataColumn("BrokerPhone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBrokerPhone)
            Me.columnBillingName = New Global.System.Data.DataColumn("BillingName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBillingName)
            Me.columnBillingAddress1 = New Global.System.Data.DataColumn("BillingAddress1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBillingAddress1)
            Me.columnBillingAddress2 = New Global.System.Data.DataColumn("BillingAddress2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBillingAddress2)
            Me.columnBillingCity = New Global.System.Data.DataColumn("BillingCity", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBillingCity)
            Me.columnBillingState = New Global.System.Data.DataColumn("BillingState", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBillingState)
            Me.columnBillingZip = New Global.System.Data.DataColumn("BillingZip", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBillingZip)
            Me.columnProductDescription = New Global.System.Data.DataColumn("ProductDescription", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProductDescription)
            Me.columnJobTicketID = New Global.System.Data.DataColumn("JobTicketID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJobTicketID)
            Me.columnJobTicketID.AutoIncrement = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewtblJobTicketsRow() As tblJobTicketsRow
            Return CType(Me.NewRow,tblJobTicketsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblJobTicketsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblJobTicketsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblJobTicketsRowChangedEvent) Is Nothing) Then
                RaiseEvent tblJobTicketsRowChanged(Me, New tblJobTicketsRowChangeEvent(CType(e.Row,tblJobTicketsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblJobTicketsRowChangingEvent) Is Nothing) Then
                RaiseEvent tblJobTicketsRowChanging(Me, New tblJobTicketsRowChangeEvent(CType(e.Row,tblJobTicketsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblJobTicketsRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblJobTicketsRowDeleted(Me, New tblJobTicketsRowChangeEvent(CType(e.Row,tblJobTicketsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblJobTicketsRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblJobTicketsRowDeleting(Me, New tblJobTicketsRowChangeEvent(CType(e.Row,tblJobTicketsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovetblJobTicketsRow(ByVal row As tblJobTicketsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSCustomerSurveys = New DSCustomerSurveys
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblJobTicketsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tblJobTicketsRow
        Inherits Global.System.Data.DataRow
        
        Private tabletblJobTickets As tblJobTicketsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblJobTickets = CType(Me.Table,tblJobTicketsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GeneratorName() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblJobTickets.GeneratorNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GeneratorName' in table 'tblJobTickets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblJobTickets.GeneratorNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JobSite() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblJobTickets.JobSiteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JobSite' in table 'tblJobTickets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblJobTickets.JobSiteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JobSiteAddress1() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblJobTickets.JobSiteAddress1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JobSiteAddress1' in table 'tblJobTickets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblJobTickets.JobSiteAddress1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JobSiteCity() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblJobTickets.JobSiteCityColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JobSiteCity' in table 'tblJobTickets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblJobTickets.JobSiteCityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JobSiteState() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblJobTickets.JobSiteStateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JobSiteState' in table 'tblJobTickets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblJobTickets.JobSiteStateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JobSiteZip() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblJobTickets.JobSiteZipColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JobSiteZip' in table 'tblJobTickets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblJobTickets.JobSiteZipColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ContactName() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblJobTickets.ContactNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ContactName' in table 'tblJobTickets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblJobTickets.ContactNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ContactPhone() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblJobTickets.ContactPhoneColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ContactPhone' in table 'tblJobTickets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblJobTickets.ContactPhoneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProductName() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblJobTickets.ProductNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ProductName' in table 'tblJobTickets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblJobTickets.ProductNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BrokerName() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblJobTickets.BrokerNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BrokerName' in table 'tblJobTickets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblJobTickets.BrokerNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BrokerContact() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblJobTickets.BrokerContactColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BrokerContact' in table 'tblJobTickets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblJobTickets.BrokerContactColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BrokerPhone() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblJobTickets.BrokerPhoneColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BrokerPhone' in table 'tblJobTickets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblJobTickets.BrokerPhoneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BillingName() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblJobTickets.BillingNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BillingName' in table 'tblJobTickets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblJobTickets.BillingNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BillingAddress1() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblJobTickets.BillingAddress1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BillingAddress1' in table 'tblJobTickets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblJobTickets.BillingAddress1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BillingAddress2() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblJobTickets.BillingAddress2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BillingAddress2' in table 'tblJobTickets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblJobTickets.BillingAddress2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BillingCity() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblJobTickets.BillingCityColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BillingCity' in table 'tblJobTickets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblJobTickets.BillingCityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BillingState() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblJobTickets.BillingStateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BillingState' in table 'tblJobTickets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblJobTickets.BillingStateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BillingZip() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblJobTickets.BillingZipColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BillingZip' in table 'tblJobTickets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblJobTickets.BillingZipColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProductDescription() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblJobTickets.ProductDescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ProductDescription' in table 'tblJobTickets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblJobTickets.ProductDescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JobTicketID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblJobTickets.JobTicketIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JobTicketID' in table 'tblJobTickets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblJobTickets.JobTicketIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGeneratorNameNull() As Boolean
            Return Me.IsNull(Me.tabletblJobTickets.GeneratorNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGeneratorNameNull()
            Me(Me.tabletblJobTickets.GeneratorNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJobSiteNull() As Boolean
            Return Me.IsNull(Me.tabletblJobTickets.JobSiteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJobSiteNull()
            Me(Me.tabletblJobTickets.JobSiteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJobSiteAddress1Null() As Boolean
            Return Me.IsNull(Me.tabletblJobTickets.JobSiteAddress1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJobSiteAddress1Null()
            Me(Me.tabletblJobTickets.JobSiteAddress1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJobSiteCityNull() As Boolean
            Return Me.IsNull(Me.tabletblJobTickets.JobSiteCityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJobSiteCityNull()
            Me(Me.tabletblJobTickets.JobSiteCityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJobSiteStateNull() As Boolean
            Return Me.IsNull(Me.tabletblJobTickets.JobSiteStateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJobSiteStateNull()
            Me(Me.tabletblJobTickets.JobSiteStateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJobSiteZipNull() As Boolean
            Return Me.IsNull(Me.tabletblJobTickets.JobSiteZipColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJobSiteZipNull()
            Me(Me.tabletblJobTickets.JobSiteZipColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsContactNameNull() As Boolean
            Return Me.IsNull(Me.tabletblJobTickets.ContactNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetContactNameNull()
            Me(Me.tabletblJobTickets.ContactNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsContactPhoneNull() As Boolean
            Return Me.IsNull(Me.tabletblJobTickets.ContactPhoneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetContactPhoneNull()
            Me(Me.tabletblJobTickets.ContactPhoneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProductNameNull() As Boolean
            Return Me.IsNull(Me.tabletblJobTickets.ProductNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProductNameNull()
            Me(Me.tabletblJobTickets.ProductNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBrokerNameNull() As Boolean
            Return Me.IsNull(Me.tabletblJobTickets.BrokerNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBrokerNameNull()
            Me(Me.tabletblJobTickets.BrokerNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBrokerContactNull() As Boolean
            Return Me.IsNull(Me.tabletblJobTickets.BrokerContactColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBrokerContactNull()
            Me(Me.tabletblJobTickets.BrokerContactColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBrokerPhoneNull() As Boolean
            Return Me.IsNull(Me.tabletblJobTickets.BrokerPhoneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBrokerPhoneNull()
            Me(Me.tabletblJobTickets.BrokerPhoneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBillingNameNull() As Boolean
            Return Me.IsNull(Me.tabletblJobTickets.BillingNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBillingNameNull()
            Me(Me.tabletblJobTickets.BillingNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBillingAddress1Null() As Boolean
            Return Me.IsNull(Me.tabletblJobTickets.BillingAddress1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBillingAddress1Null()
            Me(Me.tabletblJobTickets.BillingAddress1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBillingAddress2Null() As Boolean
            Return Me.IsNull(Me.tabletblJobTickets.BillingAddress2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBillingAddress2Null()
            Me(Me.tabletblJobTickets.BillingAddress2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBillingCityNull() As Boolean
            Return Me.IsNull(Me.tabletblJobTickets.BillingCityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBillingCityNull()
            Me(Me.tabletblJobTickets.BillingCityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBillingStateNull() As Boolean
            Return Me.IsNull(Me.tabletblJobTickets.BillingStateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBillingStateNull()
            Me(Me.tabletblJobTickets.BillingStateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBillingZipNull() As Boolean
            Return Me.IsNull(Me.tabletblJobTickets.BillingZipColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBillingZipNull()
            Me(Me.tabletblJobTickets.BillingZipColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProductDescriptionNull() As Boolean
            Return Me.IsNull(Me.tabletblJobTickets.ProductDescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProductDescriptionNull()
            Me(Me.tabletblJobTickets.ProductDescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJobTicketIDNull() As Boolean
            Return Me.IsNull(Me.tabletblJobTickets.JobTicketIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJobTicketIDNull()
            Me(Me.tabletblJobTickets.JobTicketIDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tblJobTicketsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblJobTicketsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tblJobTicketsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tblJobTicketsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
